---========================================================
---Created by Thial#0001
---Date 26.01.2023
---
---Credit to Igigog#6387 for the CreateTimeEvent idea
---for removing the particles automatically by themselves
---========================================================

---The cache collection used for storing the particles
local cache = { }

---The emergency timeout for particles that weren't given a timeout
---but don't have a time limit configured on them which will result
---in them playing forever with 0 particles.
---To clean those particles from memory a fallback timeout has to be used.
local fallback_timeout = 60000

---Gets the particles_object by the particle's id
---@param id string The id of the particle
---@return particles_object or nil
function get(id)
    if id == nil or id == "" or cache[id] == nil then
        return nil
    end

    return cache[id].object
end

---Adds a new particle to the cache
---@param particle string - The name of the particle (the path)
---@param position vector - The position on which the particle should be created
---@param timeout number - The amount of milliseconds after which the particle
---will be forcefully removed if it wasn't already. If this value is nil the particle
---will be removed once its done playing. (Make sure that the particle has a time limit set)
---@return string The id of the newly cached particle
function add(particle, position, timeout)
    if particle == nil or particle == "" or position == nil then
        return nil
    end

    local time = time_global()
    local id = "particle" .. '_' .. time .. '_'
    for i=1, 5 do
        id = id .. math.random(0,9)
    end

    cache[id] = {
        object = particles_object(particle),
        timeout = timeout and time + timeout or time + fallback_timeout
    }
    cache[id].object:play_at_pos(position)

    log("[particle_cache] Added: " .. id .. " Timeout: " .. (timeout and timeout or fallback_timeout))
    CreateTimeEvent(id, "evaluate", 0.100, evaluate, id)
    
    return id
end

---Removes a particle from the cache
---@param id string - The id of the particle
function remove(id)
    if id == nil or id == "" then
        return
    end

    if cache[id] ~= nil then
        cache[id].object:stop()
        cache[id] = nil
        log("[particle_cache] Removed: "..id)
    end    
end

---Moves the particle to a new position
---@param id string - The id of the particle
---@param position vector - The new position to move the particle to
function move_to(id, position)
    if id == nil or id == "" or position == nil then
        return
    end

    if cache[id] ~= nil and cache[id].object:playing() == true then
        cache[id].object:move_to(position, vector():set(0,0,0))
    end
end

---Evaluates the particle to determine if it should be removed
---@param id string - The id of the particle
---@return bool true if the particle was removed, false if it was not 
function evaluate(id)
    if id == nil or id == "" or cache[id] == nil then
        return true
    end

    if cache[id].object:playing() == false or time_global() > cache[id].timeout then
        remove(id)
        return true
    end

    return false
end